# Vidalytics Full Stack Docker Compose
# Production-ready configuration with all services

services:
  # =============================================================================
  # Backend Service (FastAPI)
  # =============================================================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
      args:
        BUILD_ENV: production
        BUILD_DATE: ${BUILD_DATE:-}
        VCS_REF: ${VCS_REF:-}
    container_name: Vidalytics-backend
    restart: unless-stopped
    ports:
      - "8888:8888"
    environment:
      # Application settings
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - DEBUG=false
      
      # API Keys (load from .env file)
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - YOUTUBE_API_KEY=${YOUTUBE_API_KEY}
      - BOSS_AGENT_SECRET_KEY=${BOSS_AGENT_SECRET_KEY}
      
      # Database configuration
      - DATABASE_URL=sqlite:///app/data/Vidalytics.db
      
      # Redis configuration
      - REDIS_URL=redis://redis:6379/0
      
      # Security settings
      - CORS_ORIGINS=http://localhost:3000,http://localhost:80,http://frontend
      - SESSION_SECRET_KEY=${SESSION_SECRET_KEY}
      
      # Monitoring
      - ENABLE_METRICS=true
      - METRICS_PORT=9090
    volumes:
      - backend_data:/app/data
      - backend_logs:/app/logs
      - backend_backups:/app/backups
    networks:
      - Vidalytics_network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # =============================================================================
  # Frontend Service (React + Nginx) 
  # =============================================================================
  frontend:
    build:
      context: ./frontend-new
      dockerfile: Dockerfile
      target: production
      args:
        BUILD_ENV: production
        BUILD_DATE: ${BUILD_DATE:-}
        VCS_REF: ${VCS_REF:-}
        VITE_API_BASE_URL: http://localhost:8888
    container_name: Vidalytics-frontend
    restart: unless-stopped
    ports:
      - "80:80"
    environment:
      - NGINX_PORT=80
      - NGINX_HOST=localhost
      - API_BASE_URL=http://backend:8888
    networks:
      - Vidalytics_network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # =============================================================================
  # Redis Service (Session Management & Caching)
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: Vidalytics-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-Vidalytics_redis}
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - Vidalytics_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # Monitoring Services (Optional)
  # =============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: Vidalytics-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    networks:
      - Vidalytics_network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: Vidalytics-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - Vidalytics_network
    depends_on:
      - prometheus
    profiles:
      - monitoring

# =============================================================================
# Networks
# =============================================================================
networks:
  Vidalytics_network:
    driver: bridge
    name: Vidalytics_network

# =============================================================================
# Volumes
# =============================================================================
volumes:
  backend_data:
    name: Vidalytics_backend_data
  backend_logs:
    name: Vidalytics_backend_logs
  backend_backups:
    name: Vidalytics_backend_backups
  redis_data:
    name: Vidalytics_redis_data
  prometheus_data:
    name: Vidalytics_prometheus_data
  grafana_data:
    name: Vidalytics_grafana_data