# CreatorMate Security and Dependency Scanning
# Runs security scans and dependency checks

name: Security Scans

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  # =============================================================================
  # Dependency Vulnerability Scanning
  # =============================================================================
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install Python dependencies
      run: |
        cd backend
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety
    
    - name: Python dependency scan with Safety
      run: |
        cd backend
        safety check --json --output safety-report.json
        safety check
      continue-on-error: true
    
    - name: Install Node.js dependencies
      run: |
        cd frontend-new
        npm ci
    
    - name: Node.js dependency scan with npm audit
      run: |
        cd frontend-new
        npm audit --audit-level=high --json > npm-audit-report.json
        npm audit --audit-level=high
      continue-on-error: true
    
    - name: Upload dependency scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: dependency-scan-results
        path: |
          backend/safety-report.json
          frontend-new/npm-audit-report.json

  # =============================================================================
  # Code Security Analysis
  # =============================================================================
  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python', 'javascript' ]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality
    
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"

  # =============================================================================
  # Container Security Scanning
  # =============================================================================
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Build backend Docker image
      run: |
        docker build -f backend/Dockerfile -t creatormate-backend:scan backend/
    
    - name: Build frontend Docker image
      run: |
        docker build -f frontend-new/Dockerfile -t creatormate-frontend:scan frontend-new/
    
    - name: Run Trivy vulnerability scanner on backend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'creatormate-backend:scan'
        format: 'sarif'
        output: 'backend-trivy-results.sarif'
    
    - name: Run Trivy vulnerability scanner on frontend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'creatormate-frontend:scan'
        format: 'sarif'
        output: 'frontend-trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: '.'
    
    - name: Run Hadolint on Dockerfiles
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: backend/Dockerfile
        format: sarif
        output-file: backend-hadolint-results.sarif
    
    - name: Run Hadolint on frontend Dockerfile
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: frontend-new/Dockerfile
        format: sarif
        output-file: frontend-hadolint-results.sarif
    
    - name: Upload Hadolint scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: |
          backend-hadolint-results.sarif
          frontend-hadolint-results.sarif

  # =============================================================================
  # Secrets Scanning
  # =============================================================================
  secrets-scan:
    name: Secrets Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Run TruffleHog secrets scan
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified
    
    - name: Run GitLeaks secrets scan
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE}}

  # =============================================================================
  # Infrastructure Security Scanning
  # =============================================================================
  infrastructure-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Checkov on Docker Compose files
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: docker_compose
        output_format: sarif
        output_file_path: checkov-results.sarif
    
    - name: Upload Checkov scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: checkov-results.sarif

  # =============================================================================
  # License Compliance Scanning
  # =============================================================================
  license-scan:
    name: License Compliance Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install Python dependencies
      run: |
        cd backend
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install pip-licenses
    
    - name: Generate Python license report
      run: |
        cd backend
        pip-licenses --format=json --output-file=python-licenses.json
        pip-licenses --format=plain-vertical
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install Node.js dependencies
      run: |
        cd frontend-new
        npm ci
        npm install -g license-checker
    
    - name: Generate Node.js license report
      run: |
        cd frontend-new
        license-checker --json --out nodejs-licenses.json
        license-checker --summary
    
    - name: Upload license reports
      uses: actions/upload-artifact@v3
      with:
        name: license-reports
        path: |
          backend/python-licenses.json
          frontend-new/nodejs-licenses.json

  # =============================================================================
  # Security Summary Report
  # =============================================================================
  security-summary:
    name: Security Summary Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, codeql-analysis, container-security, secrets-scan, infrastructure-scan, license-scan]
    if: always()
    
    steps:
    - name: Generate security summary
      run: |
        echo "# Security Scan Summary" > security-summary.md
        echo "" >> security-summary.md
        echo "**Scan Date:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> security-summary.md
        echo "**Commit:** ${{ github.sha }}" >> security-summary.md
        echo "**Branch:** ${{ github.ref }}" >> security-summary.md
        echo "" >> security-summary.md
        echo "## Scan Results" >> security-summary.md
        echo "" >> security-summary.md
        echo "| Scan Type | Status |" >> security-summary.md
        echo "|-----------|--------|" >> security-summary.md
        echo "| Dependency Scan | ${{ needs.dependency-scan.result }} |" >> security-summary.md
        echo "| CodeQL Analysis | ${{ needs.codeql-analysis.result }} |" >> security-summary.md
        echo "| Container Security | ${{ needs.container-security.result }} |" >> security-summary.md
        echo "| Secrets Scan | ${{ needs.secrets-scan.result }} |" >> security-summary.md
        echo "| Infrastructure Scan | ${{ needs.infrastructure-scan.result }} |" >> security-summary.md
        echo "| License Scan | ${{ needs.license-scan.result }} |" >> security-summary.md
        echo "" >> security-summary.md
        echo "For detailed results, check the individual workflow runs and security tab." >> security-summary.md
    
    - name: Upload security summary
      uses: actions/upload-artifact@v3
      with:
        name: security-summary
        path: security-summary.md
    
    - name: Comment security summary on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('security-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });